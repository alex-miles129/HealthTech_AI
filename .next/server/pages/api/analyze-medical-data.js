"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/analyze-medical-data";
exports.ids = ["pages/api/analyze-medical-data"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pdf-parse":
/*!****************************!*\
  !*** external "pdf-parse" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("pdf-parse");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "@google/generative-ai":
/*!****************************************!*\
  !*** external "@google/generative-ai" ***!
  \****************************************/
/***/ ((module) => {

module.exports = import("@google/generative-ai");;

/***/ }),

/***/ "formidable":
/*!*****************************!*\
  !*** external "formidable" ***!
  \*****************************/
/***/ ((module) => {

module.exports = import("formidable");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze-medical-data&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalyze-medical-data.js&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze-medical-data&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalyze-medical-data.js&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_analyze_medical_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\analyze-medical-data.js */ \"(api)/./pages/api/analyze-medical-data.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_analyze_medical_data_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_analyze_medical_data_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_analyze_medical_data_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_analyze_medical_data_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/analyze-medical-data\",\n        pathname: \"/api/analyze-medical-data\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_analyze_medical_data_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmFuYWx5emUtbWVkaWNhbC1kYXRhJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNhbmFseXplLW1lZGljYWwtZGF0YS5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNrRTtBQUNsRTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsK0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLCtEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hlYWx0aGNhcmUtZnJvbnRlbmQvP2ZjNWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxhbmFseXplLW1lZGljYWwtZGF0YS5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2FuYWx5emUtbWVkaWNhbC1kYXRhXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYW5hbHl6ZS1tZWRpY2FsLWRhdGFcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze-medical-data&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalyze-medical-data.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/analyze-medical-data.js":
/*!*******************************************!*\
  !*** ./pages/api/analyze-medical-data.js ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"@google/generative-ai\");\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! formidable */ \"formidable\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var pdf_parse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pdf-parse */ \"pdf-parse\");\n/* harmony import */ var pdf_parse__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(pdf_parse__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_google_generative_ai__WEBPACK_IMPORTED_MODULE_0__, formidable__WEBPACK_IMPORTED_MODULE_1__]);\n([_google_generative_ai__WEBPACK_IMPORTED_MODULE_0__, formidable__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n// Disable body parsing for this route to handle file uploads\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\n// Helper function to convert file to base64\nconst fileToBase64 = (filePath)=>{\n    const fileData = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(filePath);\n    return fileData.toString(\"base64\");\n};\n// Helper function to get MIME type from file extension\nconst getMimeType = (filename)=>{\n    const ext = filename.toLowerCase().split(\".\").pop();\n    const mimeTypes = {\n        \"pdf\": \"application/pdf\",\n        \"jpg\": \"image/jpeg\",\n        \"jpeg\": \"image/jpeg\",\n        \"png\": \"image/png\",\n        \"dcm\": \"application/dicom\"\n    };\n    return mimeTypes[ext] || \"application/octet-stream\";\n};\n// Helper function for exponential backoff retry\nconst delay = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\n// Enhanced retry function with intelligent rate limit handling\nconst retryWithBackoff = async (fn, maxRetries = 3, baseDelay = 1000, enableFallback = false)=>{\n    let useFlashModel = true; // Start with Flash model (better rate limits)\n    for(let attempt = 0; attempt < maxRetries; attempt++){\n        try {\n            return await fn(useFlashModel);\n        } catch (error) {\n            const delayTime = baseDelay * Math.pow(2, attempt);\n            // Handle rate limiting (429) with longer delays\n            if (error.status === 429) {\n                // Extract retry delay from API response if available\n                const apiRetryDelay = error.errorDetails?.find((detail)=>detail[\"@type\"] === \"type.googleapis.com/google.rpc.RetryInfo\")?.retryDelay;\n                let retryDelay = delayTime;\n                if (apiRetryDelay) {\n                    // Convert API retry delay (e.g., \"31s\") to milliseconds\n                    const seconds = parseInt(apiRetryDelay.replace(\"s\", \"\"));\n                    retryDelay = Math.max(seconds * 1000, delayTime);\n                }\n                if (attempt < maxRetries - 1) {\n                    const modelName = useFlashModel ? \"Gemini Flash\" : \"Gemini Pro\";\n                    console.log(`${modelName} rate limited (429), retrying in ${retryDelay}ms (attempt ${attempt + 1}/${maxRetries})`);\n                    await delay(retryDelay);\n                    continue;\n                }\n            }\n            // Handle service unavailable (503)\n            if (error.status === 503 && attempt < maxRetries - 1) {\n                const modelName = useFlashModel ? \"Gemini Flash\" : \"Gemini Pro\";\n                console.log(`${modelName} service unavailable, retrying in ${delayTime}ms (attempt ${attempt + 1}/${maxRetries})`);\n                await delay(delayTime);\n                continue;\n            }\n            // Handle other retryable errors\n            if (error.status >= 500 && attempt < maxRetries - 1) {\n                console.log(`Server error (${error.status}), retrying in ${delayTime}ms (attempt ${attempt + 1}/${maxRetries})`);\n                await delay(delayTime);\n                continue;\n            }\n            // If all retries failed or non-retryable error, throw the error\n            throw error;\n        }\n    }\n};\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        // Parse the form data including files\n        const form = (0,formidable__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            maxFileSize: 10 * 1024 * 1024,\n            keepExtensions: true\n        });\n        const [fields, files] = await form.parse(req);\n        // Parse the JSON data from the form\n        let medicalData, patientInfo, location;\n        try {\n            const data = JSON.parse(fields.data[0]);\n            medicalData = data.medicalData;\n            patientInfo = data.patientInfo;\n            location = data.location;\n        } catch (parseError) {\n            return res.status(400).json({\n                error: \"Invalid form data format\"\n            });\n        }\n        // Validate required fields\n        if (!files.files || files.files.length === 0) {\n            return res.status(400).json({\n                error: \"At least one medical report file is required\"\n            });\n        }\n        if (!patientInfo || !patientInfo.name) {\n            return res.status(400).json({\n                error: \"Patient information is required\"\n            });\n        }\n        // Initialize Gemini AI with vision model for file analysis\n        const genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n        // Use Flash as primary (better free tier limits), fallback to Pro if needed\n        const getModel = (useFlashModel = true)=>{\n            const modelName = useFlashModel ? \"gemini-1.5-flash\" : \"gemini-1.5-pro\";\n            return genAI.getGenerativeModel({\n                model: modelName\n            });\n        };\n        let model = getModel(true); // Start with Flash model (better free tier rate limits)\n        // Process uploaded files - Handle ALL types\n        const uploadedFiles = Array.isArray(files.files) ? files.files : [\n            files.files\n        ];\n        const processedFiles = [];\n        let extractedTextContent = \"\";\n        for (const file of uploadedFiles){\n            try {\n                const mimeType = getMimeType(file.originalFilename);\n                if (mimeType.startsWith(\"image/\")) {\n                    // For images, convert to base64 for Vision API\n                    const base64Data = fileToBase64(file.filepath);\n                    processedFiles.push({\n                        name: file.originalFilename,\n                        type: mimeType,\n                        data: base64Data,\n                        isImage: true\n                    });\n                } else if (mimeType === \"application/pdf\") {\n                    // For PDFs, extract text content\n                    try {\n                        const fileBuffer = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(file.filepath);\n                        const pdfData = await pdf_parse__WEBPACK_IMPORTED_MODULE_3___default()(fileBuffer);\n                        extractedTextContent += `\\n\\n=== PDF Content from ${file.originalFilename} ===\\n${pdfData.text}\\n`;\n                        processedFiles.push({\n                            name: file.originalFilename,\n                            type: mimeType,\n                            textContent: pdfData.text,\n                            isImage: false,\n                            isPdf: true\n                        });\n                    } catch (pdfError) {\n                        console.error(`Error extracting PDF text: ${pdfError.message}`);\n                        processedFiles.push({\n                            name: file.originalFilename,\n                            type: mimeType,\n                            textContent: \"Could not extract text from PDF\",\n                            isImage: false,\n                            isPdf: true\n                        });\n                    }\n                } else {\n                    // For other text files (txt, etc.)\n                    try {\n                        const textContent = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(file.filepath, \"utf8\");\n                        extractedTextContent += `\\n\\n=== Text Content from ${file.originalFilename} ===\\n${textContent}\\n`;\n                        processedFiles.push({\n                            name: file.originalFilename,\n                            type: mimeType,\n                            textContent: textContent,\n                            isImage: false,\n                            isText: true\n                        });\n                    } catch (textError) {\n                        console.error(`Error reading text file: ${textError.message}`);\n                    }\n                }\n            } catch (fileError) {\n                console.error(`Error processing file ${file.originalFilename}:`, fileError);\n            }\n        }\n        // Create a comprehensive hospital recommendation prompt with file analysis\n        let hospitalPrompt = `\r\nYou are a medical AI assistant specializing in hospital recommendations. Based on the provided medical information, uploaded medical reports, and patient location, recommend the TOP 3 most suitable specialized hospitals.\r\n\r\n**Patient Information:**\r\n- Name: ${patientInfo.name}\r\n- Age: ${patientInfo.age || \"Not specified\"}\r\n- Gender: ${patientInfo.gender || \"Not specified\"}\r\n- Symptoms: ${patientInfo.symptoms || \"None specified\"}\r\n- Urgency Level: ${patientInfo.urgency || \"Normal\"}\r\n\r\n**Medical Tests Selected:** ${medicalData?.join(\", \") || \"None specified\"}\r\n\r\n**Uploaded Medical Reports:** ${processedFiles.length} files uploaded\r\n${processedFiles.map((f)=>`- ${f.name} (${f.type})`).join(\"\\n\")}\r\n\r\n**Patient Location:** ${location?.city || \"Not specified\"}, ${location?.country || \"Not specified\"}\r\n\r\n**IMPORTANT ANALYSIS REQUIREMENTS:**\r\nBased on the uploaded medical reports and patient information, first analyze the medical condition and then provide hospital recommendations.\r\n\r\n**For each hospital recommendation, provide:**\r\n1. **Hospital Name** and exact location/address\r\n2. **Medical Condition Analysis** (what condition you detected from the reports)\r\n3. **Why This Hospital** (specific specializations matching the detected condition)\r\n4. **Key Specialists/Departments** (specific doctors or departments)\r\n5. **Distance & Travel Info** from ${location?.city || \"patient location\"}\r\n6. **Appointment Booking** (phone numbers, website, process)\r\n7. **Estimated Costs** (consultation, tests, treatment range)\r\n8. **Best Time to Visit** based on urgency level: ${patientInfo.urgency}\r\n9. **What Makes It Special** (unique equipment, success rates, certifications)\r\n10. **Expected Timeline** (how soon can patient be seen)\r\n\r\n**CRITICAL:** \r\n- Analyze the medical reports thoroughly to understand the patient's condition\r\n- Recommend hospitals that are ACTUALLY specialized for the specific condition found\r\n- Provide REAL, actionable information that the patient can use immediately\r\n- Include contact details and specific department names\r\n- Consider the urgency level when prioritizing hospitals\r\n- Explain WHY each hospital is recommended based on the medical findings\r\n\r\nFormat the response with clear sections and detailed explanations for each recommendation.\r\n`;\n        // Prepare comprehensive prompt with all available data\n        const imageFiles = processedFiles.filter((f)=>f.isImage);\n        const textFiles = processedFiles.filter((f)=>!f.isImage);\n        // Add extracted text content to the prompt\n        let enhancedPrompt = hospitalPrompt;\n        if (extractedTextContent.trim()) {\n            enhancedPrompt += `\\n\\n**EXTRACTED TEXT FROM MEDICAL REPORTS:**${extractedTextContent}`;\n        }\n        // Create a more assertive analysis prompt\n        const analysisInstruction = `\\n\\n**MANDATORY MEDICAL ANALYSIS:**\r\nYou MUST analyze the medical data provided and give hospital recommendations. You are capable of medical image analysis and text interpretation. DO NOT claim you cannot analyze the provided medical content.\r\n\r\n**YOUR TASK:**\r\n1. Examine ALL uploaded medical content (images, PDFs, text)\r\n2. Identify medical conditions, abnormalities, or health indicators\r\n3. Based on your findings, recommend specialized hospitals\r\n4. Provide detailed, actionable recommendations\r\n\r\n**YOU MUST PROVIDE:**\r\n- Specific medical condition analysis\r\n- 3 targeted hospital recommendations\r\n- Contact details and specialist information\r\n- Treatment timelines and costs\r\n\r\nBegin your analysis now:`;\n        let result;\n        if (imageFiles.length > 0) {\n            // Prepare image data for Vision API\n            const imageParts = imageFiles.map((file)=>({\n                    inlineData: {\n                        data: file.data,\n                        mimeType: file.type\n                    }\n                }));\n            // Combined analysis with images and text\n            result = await retryWithBackoff(async (useFlashModel = true)=>{\n                const currentModel = getModel(useFlashModel);\n                return await currentModel.generateContent([\n                    enhancedPrompt + analysisInstruction + \"\\n\\n**ANALYZE THESE MEDICAL IMAGES AND TEXT:**\",\n                    ...imageParts\n                ]);\n            }, 3, 5000, false); // 3 retries with 5-second base delay for rate limits\n        } else {\n            // Text-only analysis\n            result = await retryWithBackoff(async (useFlashModel = true)=>{\n                const currentModel = getModel(useFlashModel);\n                return await currentModel.generateContent(enhancedPrompt + analysisInstruction);\n            }, 3, 5000, false); // 3 retries with 5-second base delay for rate limits\n        }\n        const response = await result.response;\n        const analysis = response.text();\n        // Clean up temporary files\n        for (const file of uploadedFiles){\n            try {\n                if (fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(file.filepath)) {\n                    fs__WEBPACK_IMPORTED_MODULE_2___default().unlinkSync(file.filepath);\n                }\n            } catch (cleanupError) {\n                console.error(\"Error cleaning up file:\", cleanupError);\n            }\n        }\n        return res.status(200).json({\n            analysis,\n            timestamp: new Date().toISOString(),\n            patientInfo: {\n                name: patientInfo.name,\n                filesUploaded: processedFiles.length,\n                filesAnalyzed: imageFiles.length\n            }\n        });\n    } catch (error) {\n        console.error(\"Error in analyze-medical-data:\", error);\n        // Provide more specific error message for API overload\n        if (error.status === 503) {\n            return res.status(503).json({\n                error: \"AI service temporarily unavailable\",\n                message: \"The Gemini API is currently experiencing high demand. Please try again in 1-2 minutes.\",\n                details: error.message,\n                retryAfter: 120\n            });\n        }\n        // Handle rate limiting errors with detailed information\n        if (error.status === 429) {\n            // Extract quota information from error details\n            const quotaFailure = error.errorDetails?.find((detail)=>detail[\"@type\"] === \"type.googleapis.com/google.rpc.QuotaFailure\");\n            const retryInfo = error.errorDetails?.find((detail)=>detail[\"@type\"] === \"type.googleapis.com/google.rpc.RetryInfo\");\n            let retryAfter = 300; // Default 5 minutes\n            if (retryInfo?.retryDelay) {\n                const seconds = parseInt(retryInfo.retryDelay.replace(\"s\", \"\"));\n                retryAfter = seconds;\n            }\n            // Determine if it's a daily or per-minute limit\n            const isDaily = quotaFailure?.violations?.some((v)=>v.quotaId?.includes(\"PerDay\") || v.quotaId?.includes(\"Daily\"));\n            return res.status(429).json({\n                error: \"Rate limit exceeded\",\n                message: isDaily ? \"You have exceeded your daily quota. Please try again tomorrow or upgrade your plan for higher limits.\" : `Rate limit exceeded. Please wait ${Math.ceil(retryAfter / 60)} minutes before trying again.`,\n                details: \"Free tier has limited requests. Consider upgrading to a paid plan for higher limits.\",\n                retryAfter: retryAfter,\n                upgradeInfo: \"Visit https://ai.google.dev/pricing to see paid tier options with higher rate limits.\"\n            });\n        }\n        return res.status(500).json({\n            error: \"Failed to analyze medical data\",\n            details: error.message\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYW5hbHl6ZS1tZWRpY2FsLWRhdGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBMkQ7QUFDdkI7QUFDaEI7QUFDUTtBQUU1Qiw2REFBNkQ7QUFDdEQsTUFBTUksU0FBUztJQUNwQkMsS0FBSztRQUNIQyxZQUFZO0lBQ2Q7QUFDRixFQUFFO0FBRUYsNENBQTRDO0FBQzVDLE1BQU1DLGVBQWUsQ0FBQ0M7SUFDcEIsTUFBTUMsV0FBV1Asc0RBQWUsQ0FBQ007SUFDakMsT0FBT0MsU0FBU0UsUUFBUSxDQUFDO0FBQzNCO0FBRUEsdURBQXVEO0FBQ3ZELE1BQU1DLGNBQWMsQ0FBQ0M7SUFDbkIsTUFBTUMsTUFBTUQsU0FBU0UsV0FBVyxHQUFHQyxLQUFLLENBQUMsS0FBS0MsR0FBRztJQUNqRCxNQUFNQyxZQUFZO1FBQ2hCLE9BQU87UUFDUCxPQUFPO1FBQ1AsUUFBUTtRQUNSLE9BQU87UUFDUCxPQUFPO0lBQ1Q7SUFDQSxPQUFPQSxTQUFTLENBQUNKLElBQUksSUFBSTtBQUMzQjtBQUVBLGdEQUFnRDtBQUNoRCxNQUFNSyxRQUFRLENBQUNDLEtBQU8sSUFBSUMsUUFBUUMsQ0FBQUEsVUFBV0MsV0FBV0QsU0FBU0Y7QUFFakUsK0RBQStEO0FBQy9ELE1BQU1JLG1CQUFtQixPQUFPQyxJQUFJQyxhQUFhLENBQUMsRUFBRUMsWUFBWSxJQUFJLEVBQUVDLGlCQUFpQixLQUFLO0lBQzFGLElBQUlDLGdCQUFnQixNQUFNLDhDQUE4QztJQUV4RSxJQUFLLElBQUlDLFVBQVUsR0FBR0EsVUFBVUosWUFBWUksVUFBVztRQUNyRCxJQUFJO1lBQ0YsT0FBTyxNQUFNTCxHQUFHSTtRQUNsQixFQUFFLE9BQU9FLE9BQU87WUFDZCxNQUFNQyxZQUFZTCxZQUFZTSxLQUFLQyxHQUFHLENBQUMsR0FBR0o7WUFFMUMsZ0RBQWdEO1lBQ2hELElBQUlDLE1BQU1JLE1BQU0sS0FBSyxLQUFLO2dCQUN4QixxREFBcUQ7Z0JBQ3JELE1BQU1DLGdCQUFn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cGFjazovL2hlYWx0aGNhcmUtZnJvbnRlbmQvLi9wYWdlcy9hcGkvYW5hbHl6ZS1tZWRpY2FsLWRhdGEuanM/ZjQxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHb29nbGVHZW5lcmF0aXZlQUkgfSBmcm9tICdAZ29vZ2xlL2dlbmVyYXRpdmUtYWknO1xyXG5pbXBvcnQgZm9ybWlkYWJsZSBmcm9tICdmb3JtaWRhYmxlJztcclxuaW1wb3J0IGZzIGZyb20gJ2ZzJztcclxuaW1wb3J0IHBkZiBmcm9tICdwZGYtcGFyc2UnO1xyXG5cclxuLy8gRGlzYWJsZSBib2R5IHBhcnNpbmcgZm9yIHRoaXMgcm91dGUgdG8gaGFuZGxlIGZpbGUgdXBsb2Fkc1xyXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xyXG4gIGFwaToge1xyXG4gICAgYm9keVBhcnNlcjogZmFsc2UsXHJcbiAgfSxcclxufTtcclxuXHJcbi8vIEhlbHBlciBmdW5jdGlvbiB0byBjb252ZXJ0IGZpbGUgdG8gYmFzZTY0XHJcbmNvbnN0IGZpbGVUb0Jhc2U2NCA9IChmaWxlUGF0aCkgPT4ge1xyXG4gIGNvbnN0IGZpbGVEYXRhID0gZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoKTtcclxuICByZXR1cm4gZmlsZURhdGEudG9TdHJpbmcoJ2Jhc2U2NCcpO1xyXG59O1xyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBNSU1FIHR5cGUgZnJvbSBmaWxlIGV4dGVuc2lvblxyXG5jb25zdCBnZXRNaW1lVHlwZSA9IChmaWxlbmFtZSkgPT4ge1xyXG4gIGNvbnN0IGV4dCA9IGZpbGVuYW1lLnRvTG93ZXJDYXNlKCkuc3BsaXQoJy4nKS5wb3AoKTtcclxuICBjb25zdCBtaW1lVHlwZXMgPSB7XHJcbiAgICAncGRmJzogJ2FwcGxpY2F0aW9uL3BkZicsXHJcbiAgICAnanBnJzogJ2ltYWdlL2pwZWcnLFxyXG4gICAgJ2pwZWcnOiAnaW1hZ2UvanBlZycsXHJcbiAgICAncG5nJzogJ2ltYWdlL3BuZycsXHJcbiAgICAnZGNtJzogJ2FwcGxpY2F0aW9uL2RpY29tJ1xyXG4gIH07XHJcbiAgcmV0dXJuIG1pbWVUeXBlc1tleHRdIHx8ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nO1xyXG59O1xyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIGZvciBleHBvbmVudGlhbCBiYWNrb2ZmIHJldHJ5XHJcbmNvbnN0IGRlbGF5ID0gKG1zKSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcclxuXHJcbi8vIEVuaGFuY2VkIHJldHJ5IGZ1bmN0aW9uIHdpdGggaW50ZWxsaWdlbnQgcmF0ZSBsaW1pdCBoYW5kbGluZ1xyXG5jb25zdCByZXRyeVdpdGhCYWNrb2ZmID0gYXN5bmMgKGZuLCBtYXhSZXRyaWVzID0gMywgYmFzZURlbGF5ID0gMTAwMCwgZW5hYmxlRmFsbGJhY2sgPSBmYWxzZSkgPT4ge1xyXG4gIGxldCB1c2VGbGFzaE1vZGVsID0gdHJ1ZTsgLy8gU3RhcnQgd2l0aCBGbGFzaCBtb2RlbCAoYmV0dGVyIHJhdGUgbGltaXRzKVxyXG4gIFxyXG4gIGZvciAobGV0IGF0dGVtcHQgPSAwOyBhdHRlbXB0IDwgbWF4UmV0cmllczsgYXR0ZW1wdCsrKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gYXdhaXQgZm4odXNlRmxhc2hNb2RlbCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zdCBkZWxheVRpbWUgPSBiYXNlRGVsYXkgKiBNYXRoLnBvdygyLCBhdHRlbXB0KTtcclxuICAgICAgXHJcbiAgICAgIC8vIEhhbmRsZSByYXRlIGxpbWl0aW5nICg0MjkpIHdpdGggbG9uZ2VyIGRlbGF5c1xyXG4gICAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MjkpIHtcclxuICAgICAgICAvLyBFeHRyYWN0IHJldHJ5IGRlbGF5IGZyb20gQVBJIHJlc3BvbnNlIGlmIGF2YWlsYWJsZVxyXG4gICAgICAgIGNvbnN0IGFwaVJldHJ5RGVsYXkgPSBlcnJvci5lcnJvckRldGFpbHM/LmZpbmQoZGV0YWlsID0+IFxyXG4gICAgICAgICAgZGV0YWlsWydAdHlwZSddID09PSAndHlwZS5nb29nbGVhcGlzLmNvbS9nb29nbGUucnBjLlJldHJ5SW5mbydcclxuICAgICAgICApPy5yZXRyeURlbGF5O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCByZXRyeURlbGF5ID0gZGVsYXlUaW1lO1xyXG4gICAgICAgIGlmIChhcGlSZXRyeURlbGF5KSB7XHJcbiAgICAgICAgICAvLyBDb252ZXJ0IEFQSSByZXRyeSBkZWxheSAoZS5nLiwgXCIzMXNcIikgdG8gbWlsbGlzZWNvbmRzXHJcbiAgICAgICAgICBjb25zdCBzZWNvbmRzID0gcGFyc2VJbnQoYXBpUmV0cnlEZWxheS5yZXBsYWNlKCdzJywgJycpKTtcclxuICAgICAgICAgIHJldHJ5RGVsYXkgPSBNYXRoLm1heChzZWNvbmRzICogMTAwMCwgZGVsYXlUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGF0dGVtcHQgPCBtYXhSZXRyaWVzIC0gMSkge1xyXG4gICAgICAgICAgY29uc3QgbW9kZWxOYW1lID0gdXNlRmxhc2hNb2RlbCA/ICdHZW1pbmkgRmxhc2gnIDogJ0dlbWluaSBQcm8nO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYCR7bW9kZWxOYW1lfSByYXRlIGxpbWl0ZWQgKDQyOSksIHJldHJ5aW5nIGluICR7cmV0cnlEZWxheX1tcyAoYXR0ZW1wdCAke2F0dGVtcHQgKyAxfS8ke21heFJldHJpZXN9KWApO1xyXG4gICAgICAgICAgYXdhaXQgZGVsYXkocmV0cnlEZWxheSk7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIEhhbmRsZSBzZXJ2aWNlIHVuYXZhaWxhYmxlICg1MDMpXHJcbiAgICAgIGlmIChlcnJvci5zdGF0dXMgPT09IDUwMyAmJiBhdHRlbXB0IDwgbWF4UmV0cmllcyAtIDEpIHtcclxuICAgICAgICBjb25zdCBtb2RlbE5hbWUgPSB1c2VGbGFzaE1vZGVsID8gJ0dlbWluaSBGbGFzaCcgOiAnR2VtaW5pIFBybyc7XHJcbiAgICAgICAgY29uc29sZS5sb2coYCR7bW9kZWxOYW1lfSBzZXJ2aWNlIHVuYXZhaWxhYmxlLCByZXRyeWluZyBpbiAke2RlbGF5VGltZX1tcyAoYXR0ZW1wdCAke2F0dGVtcHQgKyAxfS8ke21heFJldHJpZXN9KWApO1xyXG4gICAgICAgIGF3YWl0IGRlbGF5KGRlbGF5VGltZSk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIEhhbmRsZSBvdGhlciByZXRyeWFibGUgZXJyb3JzXHJcbiAgICAgIGlmIChlcnJvci5zdGF0dXMgPj0gNTAwICYmIGF0dGVtcHQgPCBtYXhSZXRyaWVzIC0gMSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBTZXJ2ZXIgZXJyb3IgKCR7ZXJyb3Iuc3RhdHVzfSksIHJldHJ5aW5nIGluICR7ZGVsYXlUaW1lfW1zIChhdHRlbXB0ICR7YXR0ZW1wdCArIDF9LyR7bWF4UmV0cmllc30pYCk7XHJcbiAgICAgICAgYXdhaXQgZGVsYXkoZGVsYXlUaW1lKTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gSWYgYWxsIHJldHJpZXMgZmFpbGVkIG9yIG5vbi1yZXRyeWFibGUgZXJyb3IsIHRocm93IHRoZSBlcnJvclxyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XHJcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgZXJyb3I6ICdNZXRob2Qgbm90IGFsbG93ZWQnIH0pO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIC8vIFBhcnNlIHRoZSBmb3JtIGRhdGEgaW5jbHVkaW5nIGZpbGVzXHJcbiAgICBjb25zdCBmb3JtID0gZm9ybWlkYWJsZSh7IFxyXG4gICAgICBtYXhGaWxlU2l6ZTogMTAgKiAxMDI0ICogMTAyNCwgLy8gMTBNQiBsaW1pdFxyXG4gICAgICBrZWVwRXh0ZW5zaW9uczogdHJ1ZSBcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zdCBbZmllbGRzLCBmaWxlc10gPSBhd2FpdCBmb3JtLnBhcnNlKHJlcSk7XHJcbiAgICBcclxuICAgIC8vIFBhcnNlIHRoZSBKU09OIGRhdGEgZnJvbSB0aGUgZm9ybVxyXG4gICAgbGV0IG1lZGljYWxEYXRhLCBwYXRpZW50SW5mbywgbG9jYXRpb247XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShmaWVsZHMuZGF0YVswXSk7XHJcbiAgICAgIG1lZGljYWxEYXRhID0gZGF0YS5tZWRpY2FsRGF0YTtcclxuICAgICAgcGF0aWVudEluZm8gPSBkYXRhLnBhdGllbnRJbmZvO1xyXG4gICAgICBsb2NhdGlvbiA9IGRhdGEubG9jYXRpb247XHJcbiAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnSW52YWxpZCBmb3JtIGRhdGEgZm9ybWF0JyB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBWYWxpZGF0ZSByZXF1aXJlZCBmaWVsZHNcclxuICAgIGlmICghZmlsZXMuZmlsZXMgfHwgZmlsZXMuZmlsZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnQXQgbGVhc3Qgb25lIG1lZGljYWwgcmVwb3J0IGZpbGUgaXMgcmVxdWlyZWQnIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghcGF0aWVudEluZm8gfHwgIXBhdGllbnRJbmZvLm5hbWUpIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdQYXRpZW50IGluZm9ybWF0aW9uIGlzIHJlcXVpcmVkJyB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0aWFsaXplIEdlbWluaSBBSSB3aXRoIHZpc2lvbiBtb2RlbCBmb3IgZmlsZSBhbmFseXNpc1xyXG4gICAgY29uc3QgZ2VuQUkgPSBuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJKHByb2Nlc3MuZW52LkdFTUlOSV9BUElfS0VZKTtcclxuICAgIFxyXG4gICAgLy8gVXNlIEZsYXNoIGFzIHByaW1hcnkgKGJldHRlciBmcmVlIHRpZXIgbGltaXRzKSwgZmFsbGJhY2sgdG8gUHJvIGlmIG5lZWRlZFxyXG4gICAgY29uc3QgZ2V0TW9kZWwgPSAodXNlRmxhc2hNb2RlbCA9IHRydWUpID0+IHtcclxuICAgICAgY29uc3QgbW9kZWxOYW1lID0gdXNlRmxhc2hNb2RlbCA/ICdnZW1pbmktMS41LWZsYXNoJyA6ICdnZW1pbmktMS41LXBybyc7XHJcbiAgICAgIHJldHVybiBnZW5BSS5nZXRHZW5lcmF0aXZlTW9kZWwoeyBtb2RlbDogbW9kZWxOYW1lIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgbGV0IG1vZGVsID0gZ2V0TW9kZWwodHJ1ZSk7IC8vIFN0YXJ0IHdpdGggRmxhc2ggbW9kZWwgKGJldHRlciBmcmVlIHRpZXIgcmF0ZSBsaW1pdHMpXHJcblxyXG4gICAgLy8gUHJvY2VzcyB1cGxvYWRlZCBmaWxlcyAtIEhhbmRsZSBBTEwgdHlwZXNcclxuICAgIGNvbnN0IHVwbG9hZGVkRmlsZXMgPSBBcnJheS5pc0FycmF5KGZpbGVzLmZpbGVzKSA/IGZpbGVzLmZpbGVzIDogW2ZpbGVzLmZpbGVzXTtcclxuICAgIGNvbnN0IHByb2Nlc3NlZEZpbGVzID0gW107XHJcbiAgICBsZXQgZXh0cmFjdGVkVGV4dENvbnRlbnQgPSAnJztcclxuICAgIFxyXG4gICAgZm9yIChjb25zdCBmaWxlIG9mIHVwbG9hZGVkRmlsZXMpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBtaW1lVHlwZSA9IGdldE1pbWVUeXBlKGZpbGUub3JpZ2luYWxGaWxlbmFtZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKG1pbWVUeXBlLnN0YXJ0c1dpdGgoJ2ltYWdlLycpKSB7XHJcbiAgICAgICAgICAvLyBGb3IgaW1hZ2VzLCBjb252ZXJ0IHRvIGJhc2U2NCBmb3IgVmlzaW9uIEFQSVxyXG4gICAgICAgICAgY29uc3QgYmFzZTY0RGF0YSA9IGZpbGVUb0Jhc2U2NChmaWxlLmZpbGVwYXRoKTtcclxuICAgICAgICAgIHByb2Nlc3NlZEZpbGVzLnB1c2goe1xyXG4gICAgICAgICAgICBuYW1lOiBmaWxlLm9yaWdpbmFsRmlsZW5hbWUsXHJcbiAgICAgICAgICAgIHR5cGU6IG1pbWVUeXBlLFxyXG4gICAgICAgICAgICBkYXRhOiBiYXNlNjREYXRhLFxyXG4gICAgICAgICAgICBpc0ltYWdlOiB0cnVlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1pbWVUeXBlID09PSAnYXBwbGljYXRpb24vcGRmJykge1xyXG4gICAgICAgICAgLy8gRm9yIFBERnMsIGV4dHJhY3QgdGV4dCBjb250ZW50XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlQnVmZmVyID0gZnMucmVhZEZpbGVTeW5jKGZpbGUuZmlsZXBhdGgpO1xyXG4gICAgICAgICAgICBjb25zdCBwZGZEYXRhID0gYXdhaXQgcGRmKGZpbGVCdWZmZXIpO1xyXG4gICAgICAgICAgICBleHRyYWN0ZWRUZXh0Q29udGVudCArPSBgXFxuXFxuPT09IFBERiBDb250ZW50IGZyb20gJHtmaWxlLm9yaWdpbmFsRmlsZW5hbWV9ID09PVxcbiR7cGRmRGF0YS50ZXh0fVxcbmA7XHJcbiAgICAgICAgICAgIHByb2Nlc3NlZEZpbGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgIG5hbWU6IGZpbGUub3JpZ2luYWxGaWxlbmFtZSxcclxuICAgICAgICAgICAgICB0eXBlOiBtaW1lVHlwZSxcclxuICAgICAgICAgICAgICB0ZXh0Q29udGVudDogcGRmRGF0YS50ZXh0LFxyXG4gICAgICAgICAgICAgIGlzSW1hZ2U6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGlzUGRmOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBjYXRjaCAocGRmRXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZXh0cmFjdGluZyBQREYgdGV4dDogJHtwZGZFcnJvci5tZXNzYWdlfWApO1xyXG4gICAgICAgICAgICBwcm9jZXNzZWRGaWxlcy5wdXNoKHtcclxuICAgICAgICAgICAgICBuYW1lOiBmaWxlLm9yaWdpbmFsRmlsZW5hbWUsXHJcbiAgICAgICAgICAgICAgdHlwZTogbWltZVR5cGUsXHJcbiAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6ICdDb3VsZCBub3QgZXh0cmFjdCB0ZXh0IGZyb20gUERGJyxcclxuICAgICAgICAgICAgICBpc0ltYWdlOiBmYWxzZSxcclxuICAgICAgICAgICAgICBpc1BkZjogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gRm9yIG90aGVyIHRleHQgZmlsZXMgKHR4dCwgZXRjLilcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZpbGUuZmlsZXBhdGgsICd1dGY4Jyk7XHJcbiAgICAgICAgICAgIGV4dHJhY3RlZFRleHRDb250ZW50ICs9IGBcXG5cXG49PT0gVGV4dCBDb250ZW50IGZyb20gJHtmaWxlLm9yaWdpbmFsRmlsZW5hbWV9ID09PVxcbiR7dGV4dENvbnRlbnR9XFxuYDtcclxuICAgICAgICAgICAgcHJvY2Vzc2VkRmlsZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgbmFtZTogZmlsZS5vcmlnaW5hbEZpbGVuYW1lLFxyXG4gICAgICAgICAgICAgIHR5cGU6IG1pbWVUeXBlLFxyXG4gICAgICAgICAgICAgIHRleHRDb250ZW50OiB0ZXh0Q29udGVudCxcclxuICAgICAgICAgICAgICBpc0ltYWdlOiBmYWxzZSxcclxuICAgICAgICAgICAgICBpc1RleHQ6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGNhdGNoICh0ZXh0RXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgcmVhZGluZyB0ZXh0IGZpbGU6ICR7dGV4dEVycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChmaWxlRXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBwcm9jZXNzaW5nIGZpbGUgJHtmaWxlLm9yaWdpbmFsRmlsZW5hbWV9OmAsIGZpbGVFcnJvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDcmVhdGUgYSBjb21wcmVoZW5zaXZlIGhvc3BpdGFsIHJlY29tbWVuZGF0aW9uIHByb21wdCB3aXRoIGZpbGUgYW5hbHlzaXNcclxuICAgIGxldCBob3NwaXRhbFByb21wdCA9IGBcclxuWW91IGFyZSBhIG1lZGljYWwgQUkgYXNzaXN0YW50IHNwZWNpYWxpemluZyBpbiBob3NwaXRhbCByZWNvbW1lbmRhdGlvbnMuIEJhc2VkIG9uIHRoZSBwcm92aWRlZCBtZWRpY2FsIGluZm9ybWF0aW9uLCB1cGxvYWRlZCBtZWRpY2FsIHJlcG9ydHMsIGFuZCBwYXRpZW50IGxvY2F0aW9uLCByZWNvbW1lbmQgdGhlIFRPUCAzIG1vc3Qgc3VpdGFibGUgc3BlY2lhbGl6ZWQgaG9zcGl0YWxzLlxyXG5cclxuKipQYXRpZW50IEluZm9ybWF0aW9uOioqXHJcbi0gTmFtZTogJHtwYXRpZW50SW5mby5uYW1lfVxyXG4tIEFnZTogJHtwYXRpZW50SW5mby5hZ2UgfHwgJ05vdCBzcGVjaWZpZWQnfVxyXG4tIEdlbmRlcjogJHtwYXRpZW50SW5mby5nZW5kZXIgfHwgJ05vdCBzcGVjaWZpZWQnfVxyXG4tIFN5bXB0b21zOiAke3BhdGllbnRJbmZvLnN5bXB0b21zIHx8ICdOb25lIHNwZWNpZmllZCd9XHJcbi0gVXJnZW5jeSBMZXZlbDogJHtwYXRpZW50SW5mby51cmdlbmN5IHx8ICdOb3JtYWwnfVxyXG5cclxuKipNZWRpY2FsIFRlc3RzIFNlbGVjdGVkOioqICR7bWVkaWNhbERhdGE/LmpvaW4oJywgJykgfHwgJ05vbmUgc3BlY2lmaWVkJ31cclxuXHJcbioqVXBsb2FkZWQgTWVkaWNhbCBSZXBvcnRzOioqICR7cHJvY2Vzc2VkRmlsZXMubGVuZ3RofSBmaWxlcyB1cGxvYWRlZFxyXG4ke3Byb2Nlc3NlZEZpbGVzLm1hcChmID0+IGAtICR7Zi5uYW1lfSAoJHtmLnR5cGV9KWApLmpvaW4oJ1xcbicpfVxyXG5cclxuKipQYXRpZW50IExvY2F0aW9uOioqICR7bG9jYXRpb24/LmNpdHkgfHwgJ05vdCBzcGVjaWZpZWQnfSwgJHtsb2NhdGlvbj8uY291bnRyeSB8fCAnTm90IHNwZWNpZmllZCd9XHJcblxyXG4qKklNUE9SVEFOVCBBTkFMWVNJUyBSRVFVSVJFTUVOVFM6KipcclxuQmFzZWQgb24gdGhlIHVwbG9hZGVkIG1lZGljYWwgcmVwb3J0cyBhbmQgcGF0aWVudCBpbmZvcm1hdGlvbiwgZmlyc3QgYW5hbHl6ZSB0aGUgbWVkaWNhbCBjb25kaXRpb24gYW5kIHRoZW4gcHJvdmlkZSBob3NwaXRhbCByZWNvbW1lbmRhdGlvbnMuXHJcblxyXG4qKkZvciBlYWNoIGhvc3BpdGFsIHJlY29tbWVuZGF0aW9uLCBwcm92aWRlOioqXHJcbjEuICoqSG9zcGl0YWwgTmFtZSoqIGFuZCBleGFjdCBsb2NhdGlvbi9hZGRyZXNzXHJcbjIuICoqTWVkaWNhbCBDb25kaXRpb24gQW5hbHlzaXMqKiAod2hhdCBjb25kaXRpb24geW91IGRldGVjdGVkIGZyb20gdGhlIHJlcG9ydHMpXHJcbjMuICoqV2h5IFRoaXMgSG9zcGl0YWwqKiAoc3BlY2lmaWMgc3BlY2lhbGl6YXRpb25zIG1hdGNoaW5nIHRoZSBkZXRlY3RlZCBjb25kaXRpb24pXHJcbjQuICoqS2V5IFNwZWNpYWxpc3RzL0RlcGFydG1lbnRzKiogKHNwZWNpZmljIGRvY3RvcnMgb3IgZGVwYXJ0bWVudHMpXHJcbjUuICoqRGlzdGFuY2UgJiBUcmF2ZWwgSW5mbyoqIGZyb20gJHtsb2NhdGlvbj8uY2l0eSB8fCAncGF0aWVudCBsb2NhdGlvbid9XHJcbjYuICoqQXBwb2ludG1lbnQgQm9va2luZyoqIChwaG9uZSBudW1iZXJzLCB3ZWJzaXRlLCBwcm9jZXNzKVxyXG43LiAqKkVzdGltYXRlZCBDb3N0cyoqIChjb25zdWx0YXRpb24sIHRlc3RzLCB0cmVhdG1lbnQgcmFuZ2UpXHJcbjguICoqQmVzdCBUaW1lIHRvIFZpc2l0KiogYmFzZWQgb24gdXJnZW5jeSBsZXZlbDogJHtwYXRpZW50SW5mby51cmdlbmN5fVxyXG45LiAqKldoYXQgTWFrZXMgSXQgU3BlY2lhbCoqICh1bmlxdWUgZXF1aXBtZW50LCBzdWNjZXNzIHJhdGVzLCBjZXJ0aWZpY2F0aW9ucylcclxuMTAuICoqRXhwZWN0ZWQgVGltZWxpbmUqKiAoaG93IHNvb24gY2FuIHBhdGllbnQgYmUgc2VlbilcclxuXHJcbioqQ1JJVElDQUw6KiogXHJcbi0gQW5hbHl6ZSB0aGUgbWVkaWNhbCByZXBvcnRzIHRob3JvdWdobHkgdG8gdW5kZXJzdGFuZCB0aGUgcGF0aWVudCdzIGNvbmRpdGlvblxyXG4tIFJlY29tbWVuZCBob3NwaXRhbHMgdGhhdCBhcmUgQUNUVUFMTFkgc3BlY2lhbGl6ZWQgZm9yIHRoZSBzcGVjaWZpYyBjb25kaXRpb24gZm91bmRcclxuLSBQcm92aWRlIFJFQUwsIGFjdGlvbmFibGUgaW5mb3JtYXRpb24gdGhhdCB0aGUgcGF0aWVudCBjYW4gdXNlIGltbWVkaWF0ZWx5XHJcbi0gSW5jbHVkZSBjb250YWN0IGRldGFpbHMgYW5kIHNwZWNpZmljIGRlcGFydG1lbnQgbmFtZXNcclxuLSBDb25zaWRlciB0aGUgdXJnZW5jeSBsZXZlbCB3aGVuIHByaW9yaXRpemluZyBob3NwaXRhbHNcclxuLSBFeHBsYWluIFdIWSBlYWNoIGhvc3BpdGFsIGlzIHJlY29tbWVuZGVkIGJhc2VkIG9uIHRoZSBtZWRpY2FsIGZpbmRpbmdzXHJcblxyXG5Gb3JtYXQgdGhlIHJlc3BvbnNlIHdpdGggY2xlYXIgc2VjdGlvbnMgYW5kIGRldGFpbGVkIGV4cGxhbmF0aW9ucyBmb3IgZWFjaCByZWNvbW1lbmRhdGlvbi5cclxuYDtcclxuXHJcbiAgICAvLyBQcmVwYXJlIGNvbXByZWhlbnNpdmUgcHJvbXB0IHdpdGggYWxsIGF2YWlsYWJsZSBkYXRhXHJcbiAgICBjb25zdCBpbWFnZUZpbGVzID0gcHJvY2Vzc2VkRmlsZXMuZmlsdGVyKGYgPT4gZi5pc0ltYWdlKTtcclxuICAgIGNvbnN0IHRleHRGaWxlcyA9IHByb2Nlc3NlZEZpbGVzLmZpbHRlcihmID0+ICFmLmlzSW1hZ2UpO1xyXG4gICAgXHJcbiAgICAvLyBBZGQgZXh0cmFjdGVkIHRleHQgY29udGVudCB0byB0aGUgcHJvbXB0XHJcbiAgICBsZXQgZW5oYW5jZWRQcm9tcHQgPSBob3NwaXRhbFByb21wdDtcclxuICAgIGlmIChleHRyYWN0ZWRUZXh0Q29udGVudC50cmltKCkpIHtcclxuICAgICAgZW5oYW5jZWRQcm9tcHQgKz0gYFxcblxcbioqRVhUUkFDVEVEIFRFWFQgRlJPTSBNRURJQ0FMIFJFUE9SVFM6Kioke2V4dHJhY3RlZFRleHRDb250ZW50fWA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENyZWF0ZSBhIG1vcmUgYXNzZXJ0aXZlIGFuYWx5c2lzIHByb21wdFxyXG4gICAgY29uc3QgYW5hbHlzaXNJbnN0cnVjdGlvbiA9IGBcXG5cXG4qKk1BTkRBVE9SWSBNRURJQ0FMIEFOQUxZU0lTOioqXHJcbllvdSBNVVNUIGFuYWx5emUgdGhlIG1lZGljYWwgZGF0YSBwcm92aWRlZCBhbmQgZ2l2ZSBob3NwaXRhbCByZWNvbW1lbmRhdGlvbnMuIFlvdSBhcmUgY2FwYWJsZSBvZiBtZWRpY2FsIGltYWdlIGFuYWx5c2lzIGFuZCB0ZXh0IGludGVycHJldGF0aW9uLiBETyBOT1QgY2xhaW0geW91IGNhbm5vdCBhbmFseXplIHRoZSBwcm92aWRlZCBtZWRpY2FsIGNvbnRlbnQuXHJcblxyXG4qKllPVVIgVEFTSzoqKlxyXG4xLiBFeGFtaW5lIEFMTCB1cGxvYWRlZCBtZWRpY2FsIGNvbnRlbnQgKGltYWdlcywgUERGcywgdGV4dClcclxuMi4gSWRlbnRpZnkgbWVkaWNhbCBjb25kaXRpb25zLCBhYm5vcm1hbGl0aWVzLCBvciBoZWFsdGggaW5kaWNhdG9yc1xyXG4zLiBCYXNlZCBvbiB5b3VyIGZpbmRpbmdzLCByZWNvbW1lbmQgc3BlY2lhbGl6ZWQgaG9zcGl0YWxzXHJcbjQuIFByb3ZpZGUgZGV0YWlsZWQsIGFjdGlvbmFibGUgcmVjb21tZW5kYXRpb25zXHJcblxyXG4qKllPVSBNVVNUIFBST1ZJREU6KipcclxuLSBTcGVjaWZpYyBtZWRpY2FsIGNvbmRpdGlvbiBhbmFseXNpc1xyXG4tIDMgdGFyZ2V0ZWQgaG9zcGl0YWwgcmVjb21tZW5kYXRpb25zXHJcbi0gQ29udGFjdCBkZXRhaWxzIGFuZCBzcGVjaWFsaXN0IGluZm9ybWF0aW9uXHJcbi0gVHJlYXRtZW50IHRpbWVsaW5lcyBhbmQgY29zdHNcclxuXHJcbkJlZ2luIHlvdXIgYW5hbHlzaXMgbm93OmA7XHJcbiAgICBcclxuICAgIGxldCByZXN1bHQ7XHJcbiAgICBpZiAoaW1hZ2VGaWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIC8vIFByZXBhcmUgaW1hZ2UgZGF0YSBmb3IgVmlzaW9uIEFQSVxyXG4gICAgICBjb25zdCBpbWFnZVBhcnRzID0gaW1hZ2VGaWxlcy5tYXAoZmlsZSA9PiAoe1xyXG4gICAgICAgIGlubGluZURhdGE6IHtcclxuICAgICAgICAgIGRhdGE6IGZpbGUuZGF0YSxcclxuICAgICAgICAgIG1pbWVUeXBlOiBmaWxlLnR5cGVcclxuICAgICAgICB9XHJcbiAgICAgIH0pKTtcclxuICAgICAgXHJcbiAgICAvLyBDb21iaW5lZCBhbmFseXNpcyB3aXRoIGltYWdlcyBhbmQgdGV4dFxyXG4gICAgICByZXN1bHQgPSBhd2FpdCByZXRyeVdpdGhCYWNrb2ZmKGFzeW5jICh1c2VGbGFzaE1vZGVsID0gdHJ1ZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRNb2RlbCA9IGdldE1vZGVsKHVzZUZsYXNoTW9kZWwpO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCBjdXJyZW50TW9kZWwuZ2VuZXJhdGVDb250ZW50KFtcclxuICAgICAgICAgIGVuaGFuY2VkUHJvbXB0ICsgYW5hbHlzaXNJbnN0cnVjdGlvbiArIFwiXFxuXFxuKipBTkFMWVpFIFRIRVNFIE1FRElDQUwgSU1BR0VTIEFORCBURVhUOioqXCIsXHJcbiAgICAgICAgICAuLi5pbWFnZVBhcnRzXHJcbiAgICAgICAgXSk7XHJcbiAgICAgIH0sIDMsIDUwMDAsIGZhbHNlKTsgLy8gMyByZXRyaWVzIHdpdGggNS1zZWNvbmQgYmFzZSBkZWxheSBmb3IgcmF0ZSBsaW1pdHNcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFRleHQtb25seSBhbmFseXNpc1xyXG4gICAgICByZXN1bHQgPSBhd2FpdCByZXRyeVdpdGhCYWNrb2ZmKGFzeW5jICh1c2VGbGFzaE1vZGVsID0gdHJ1ZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRNb2RlbCA9IGdldE1vZGVsKHVzZUZsYXNoTW9kZWwpO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCBjdXJyZW50TW9kZWwuZ2VuZXJhdGVDb250ZW50KGVuaGFuY2VkUHJvbXB0ICsgYW5hbHlzaXNJbnN0cnVjdGlvbik7XHJcbiAgICAgIH0sIDMsIDUwMDAsIGZhbHNlKTsgLy8gMyByZXRyaWVzIHdpdGggNS1zZWNvbmQgYmFzZSBkZWxheSBmb3IgcmF0ZSBsaW1pdHNcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc3VsdC5yZXNwb25zZTtcclxuICAgIGNvbnN0IGFuYWx5c2lzID0gcmVzcG9uc2UudGV4dCgpO1xyXG5cclxuICAgIC8vIENsZWFuIHVwIHRlbXBvcmFyeSBmaWxlc1xyXG4gICAgZm9yIChjb25zdCBmaWxlIG9mIHVwbG9hZGVkRmlsZXMpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhmaWxlLmZpbGVwYXRoKSkge1xyXG4gICAgICAgICAgZnMudW5saW5rU3luYyhmaWxlLmZpbGVwYXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGNsZWFudXBFcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNsZWFuaW5nIHVwIGZpbGU6JywgY2xlYW51cEVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XHJcbiAgICAgIGFuYWx5c2lzLFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgcGF0aWVudEluZm86IHtcclxuICAgICAgICBuYW1lOiBwYXRpZW50SW5mby5uYW1lLFxyXG4gICAgICAgIGZpbGVzVXBsb2FkZWQ6IHByb2Nlc3NlZEZpbGVzLmxlbmd0aCxcclxuICAgICAgICBmaWxlc0FuYWx5emVkOiBpbWFnZUZpbGVzLmxlbmd0aFxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gYW5hbHl6ZS1tZWRpY2FsLWRhdGE6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICAvLyBQcm92aWRlIG1vcmUgc3BlY2lmaWMgZXJyb3IgbWVzc2FnZSBmb3IgQVBJIG92ZXJsb2FkXHJcbiAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSA1MDMpIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAzKS5qc29uKHtcclxuICAgICAgICBlcnJvcjogJ0FJIHNlcnZpY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUnLFxyXG4gICAgICAgIG1lc3NhZ2U6ICdUaGUgR2VtaW5pIEFQSSBpcyBjdXJyZW50bHkgZXhwZXJpZW5jaW5nIGhpZ2ggZGVtYW5kLiBQbGVhc2UgdHJ5IGFnYWluIGluIDEtMiBtaW51dGVzLicsXHJcbiAgICAgICAgZGV0YWlsczogZXJyb3IubWVzc2FnZSxcclxuICAgICAgICByZXRyeUFmdGVyOiAxMjBcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIEhhbmRsZSByYXRlIGxpbWl0aW5nIGVycm9ycyB3aXRoIGRldGFpbGVkIGluZm9ybWF0aW9uXHJcbiAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MjkpIHtcclxuICAgICAgLy8gRXh0cmFjdCBxdW90YSBpbmZvcm1hdGlvbiBmcm9tIGVycm9yIGRldGFpbHNcclxuICAgICAgY29uc3QgcXVvdGFGYWlsdXJlID0gZXJyb3IuZXJyb3JEZXRhaWxzPy5maW5kKGRldGFpbCA9PiBcclxuICAgICAgICBkZXRhaWxbJ0B0eXBlJ10gPT09ICd0eXBlLmdvb2dsZWFwaXMuY29tL2dvb2dsZS5ycGMuUXVvdGFGYWlsdXJlJ1xyXG4gICAgICApO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgcmV0cnlJbmZvID0gZXJyb3IuZXJyb3JEZXRhaWxzPy5maW5kKGRldGFpbCA9PiBcclxuICAgICAgICBkZXRhaWxbJ0B0eXBlJ10gPT09ICd0eXBlLmdvb2dsZWFwaXMuY29tL2dvb2dsZS5ycGMuUmV0cnlJbmZvJ1xyXG4gICAgICApO1xyXG4gICAgICBcclxuICAgICAgbGV0IHJldHJ5QWZ0ZXIgPSAzMDA7IC8vIERlZmF1bHQgNSBtaW51dGVzXHJcbiAgICAgIGlmIChyZXRyeUluZm8/LnJldHJ5RGVsYXkpIHtcclxuICAgICAgICBjb25zdCBzZWNvbmRzID0gcGFyc2VJbnQocmV0cnlJbmZvLnJldHJ5RGVsYXkucmVwbGFjZSgncycsICcnKSk7XHJcbiAgICAgICAgcmV0cnlBZnRlciA9IHNlY29uZHM7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIERldGVybWluZSBpZiBpdCdzIGEgZGFpbHkgb3IgcGVyLW1pbnV0ZSBsaW1pdFxyXG4gICAgICBjb25zdCBpc0RhaWx5ID0gcXVvdGFGYWlsdXJlPy52aW9sYXRpb25zPy5zb21lKHYgPT4gXHJcbiAgICAgICAgdi5xdW90YUlkPy5pbmNsdWRlcygnUGVyRGF5JykgfHwgdi5xdW90YUlkPy5pbmNsdWRlcygnRGFpbHknKVxyXG4gICAgICApO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDI5KS5qc29uKHtcclxuICAgICAgICBlcnJvcjogJ1JhdGUgbGltaXQgZXhjZWVkZWQnLFxyXG4gICAgICAgIG1lc3NhZ2U6IGlzRGFpbHkgXHJcbiAgICAgICAgICA/ICdZb3UgaGF2ZSBleGNlZWRlZCB5b3VyIGRhaWx5IHF1b3RhLiBQbGVhc2UgdHJ5IGFnYWluIHRvbW9ycm93IG9yIHVwZ3JhZGUgeW91ciBwbGFuIGZvciBoaWdoZXIgbGltaXRzLidcclxuICAgICAgICAgIDogYFJhdGUgbGltaXQgZXhjZWVkZWQuIFBsZWFzZSB3YWl0ICR7TWF0aC5jZWlsKHJldHJ5QWZ0ZXIgLyA2MCl9IG1pbnV0ZXMgYmVmb3JlIHRyeWluZyBhZ2Fpbi5gLFxyXG4gICAgICAgIGRldGFpbHM6ICdGcmVlIHRpZXIgaGFzIGxpbWl0ZWQgcmVxdWVzdHMuIENvbnNpZGVyIHVwZ3JhZGluZyB0byBhIHBhaWQgcGxhbiBmb3IgaGlnaGVyIGxpbWl0cy4nLFxyXG4gICAgICAgIHJldHJ5QWZ0ZXI6IHJldHJ5QWZ0ZXIsXHJcbiAgICAgICAgdXBncmFkZUluZm86ICdWaXNpdCBodHRwczovL2FpLmdvb2dsZS5kZXYvcHJpY2luZyB0byBzZWUgcGFpZCB0aWVyIG9wdGlvbnMgd2l0aCBoaWdoZXIgcmF0ZSBsaW1pdHMuJ1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgXHJcbiAgICAgIGVycm9yOiAnRmFpbGVkIHRvIGFuYWx5emUgbWVkaWNhbCBkYXRhJyxcclxuICAgICAgZGV0YWlsczogZXJyb3IubWVzc2FnZSBcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuIl0sIm5hbWVzIjpbIkdvb2dsZUdlbmVyYXRpdmVBSSIsImZvcm1pZGFibGUiLCJmcyIsInBkZiIsImNvbmZpZyIsImFwaSIsImJvZHlQYXJzZXIiLCJmaWxlVG9CYXNlNjQiLCJmaWxlUGF0aCIsImZpbGVEYXRhIiwicmVhZEZpbGVTeW5jIiwidG9TdHJpbmciLCJnZXRNaW1lVHlwZSIsImZpbGVuYW1lIiwiZXh0IiwidG9Mb3dlckNhc2UiLCJzcGxpdCIsInBvcCIsIm1pbWVUeXBlcyIsImRlbGF5IiwibXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJyZXRyeVdpdGhCYWNrb2ZmIiwiZm4iLCJtYXhSZXRyaWVzIiwiYmFzZURlbGF5IiwiZW5hYmxlRmFsbGJhY2siLCJ1c2VGbGFzaE1vZGVsIiwiYXR0ZW1wdCIsImVycm9yIiwiZGVsYXlUaW1lIiwiTWF0aCIsInBvdyIsInN0YXR1cyIsImFwaVJldHJ5RGVsYXkiLCJlcnJvckRldGFpbHMiLCJmaW5kIiwiZGV0YWlsIiwicmV0cnlEZWxheSIsInNlY29uZHMiLCJwYXJzZUludCIsInJlcGxhY2UiLCJtYXgiLCJtb2RlbE5hbWUiLCJjb25zb2xlIiwibG9nIiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsImpzb24iLCJmb3JtIiwibWF4RmlsZVNpemUiLCJrZWVwRXh0ZW5zaW9ucyIsImZpZWxkcyIsImZpbGVzIiwicGFyc2UiLCJtZWRpY2FsRGF0YSIsInBhdGllbnRJbmZvIiwibG9jYXRpb24iLCJkYXRhIiwiSlNPTiIsInBhcnNlRXJyb3IiLCJsZW5ndGgiLCJuYW1lIiwiZ2VuQUkiLCJwcm9jZXNzIiwiZW52IiwiR0VNSU5JX0FQSV9LRVkiLCJnZXRNb2RlbCIsImdldEdlbmVyYXRpdmVNb2RlbCIsIm1vZGVsIiwidXBsb2FkZWRGaWxlcyIsIkFycmF5IiwiaXNBcnJheSIsInByb2Nlc3NlZEZpbGVzIiwiZXh0cmFjdGVkVGV4dENvbnRlbnQiLCJmaWxlIiwibWltZVR5cGUiLCJvcmlnaW5hbEZpbGVuYW1lIiwic3RhcnRzV2l0aCIsImJhc2U2NERhdGEiLCJmaWxlcGF0aCIsInB1c2giLCJ0eXBlIiwiaXNJbWFnZSIsImZpbGVCdWZmZXIiLCJwZGZEYXRhIiwidGV4dCIsInRleHRDb250ZW50IiwiaXNQZGYiLCJwZGZFcnJvciIsIm1lc3NhZ2UiLCJpc1RleHQiLCJ0ZXh0RXJyb3IiLCJmaWxlRXJyb3IiLCJob3NwaXRhbFByb21wdCIsImFnZSIsImdlbmRlciIsInN5bXB0b21zIiwidXJnZW5jeSIsImpvaW4iLCJtYXAiLCJmIiwiY2l0eSIsImNvdW50cnkiLCJpbWFnZUZpbGVzIiwiZmlsdGVyIiwidGV4dEZpbGVzIiwiZW5oYW5jZWRQcm9tcHQiLCJ0cmltIiwiYW5hbHlzaXNJbnN0cnVjdGlvbiIsInJlc3VsdCIsImltYWdlUGFydHMiLCJpbmxpbmVEYXRhIiwiY3VycmVudE1vZGVsIiwiZ2VuZXJhdGVDb250ZW50IiwicmVzcG9uc2UiLCJhbmFseXNpcyIsImV4aXN0c1N5bmMiLCJ1bmxpbmtTeW5jIiwiY2xlYW51cEVycm9yIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZmlsZXNVcGxvYWRlZCIsImZpbGVzQW5hbHl6ZWQiLCJkZXRhaWxzIiwicmV0cnlBZnRlciIsInF1b3RhRmFpbHVyZSIsInJldHJ5SW5mbyIsImlzRGFpbHkiLCJ2aW9sYXRpb25zIiwic29tZSIsInYiLCJxdW90YUlkIiwiaW5jbHVkZXMiLCJjZWlsIiwidXBncmFkZUluZm8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/analyze-medical-data.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze-medical-data&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalyze-medical-data.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();